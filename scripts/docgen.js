/**
 * Copyright (c) 2019-2021 August
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

const { existsSync } = require('fs');
const { version } = require('../package.json');
const { join } = require('path');
const typedoc = require('typedoc');
const { execSync } = require('child_process');

const log = (message) => process.stdout.write(`[docs] ${message}\n`);

const commitHash = execSync('git rev-parse HEAD', { cwd: join(__dirname, '..') }).toString().trim() ?? 'master';

async function generate() {
  log('initalising typedoc...');
  const app = new typedoc.Application();
  app.options.addReader(new typedoc.TSConfigReader());
  app.options.addReader(new typedoc.TypeDocReader());

  app.bootstrap({
    entryPoints: ['src'],
    excludePrivate: true,
    excludeProtected: true
  });

  log('bootstrapped project, now getting reflections');
  const project = app.convert();
  if (project) {
    log('received reflections, now outputing it to scripts/generated/docs.json');

    const outputDir = join(__dirname, 'generated');
    await app.generateJson(project, join(outputDir, 'docs.json'));
  }
}

async function main() {
  if (!existsSync(join(__dirname, 'generated', 'docs.json'))) await generate();

  log('now reading contents...');
  const docs = require(join(__dirname, 'generated', 'docs.json'));
  let elements = [];

  const starting = [
    '-- DO NOT EDIT THIS FILE YOURSELF, THIS IS AUTO-GENERATED --',
    '',
    `Library Version: ${version}`,
    `Updated At: ${new Date().toLocaleString()}`
  ];

  log(`loaded documentation for ${docs.name} and received ${docs.children.length} children to read from`);
  for (let i = 0; i < docs.children.length; i++) {
    const parent = docs.children[i];
    const E = read(parent);

    elements = elements.concat(E);
  }
}

function read(child) {
  const elements = [];

  //console.log(`received ${child.kindString} ${child.name}`);
  if (child.children && child.children.length > 0) {
    for (let i = 0; i < child.children.length; i++) {
      const c = child.children[i];
      //console.log(`received ${c.kindString} ${c.name}`);

      const element = readChild(c, child);
      elements.push(element);
    }
  }

  return elements;
}

function readChild(child, parent) {
  const elements = {
    parent: parent ? { kind: parent.kindString, name: parent.name } : null,
    constructor: null,
    methods: [],
    accessors: [],
    properties: [],
    variables: [],
    functions: [],
    comment: null,
    name: null,
    generics: [],
    sources: [],
    extends: []
  };

  switch (child.kindString) {
    case 'Class': {
      if (child.comment !== undefined) elements.comment = child.comment.shortText.trim();
      if (child.name !== undefined) elements.name = child.name === 'default' ? elements.parent?.name ?? 'default' : child.name;
      if (child.typeParameter !== undefined) {
        for (let i = 0; i < child.typeParameter.length; i++) {
          const generic = child.typeParameter[i];
          elements.generics.push({
            name: generic.name,
            comment: generic.comment?.shortText.trim() ?? ''
          });
        }
      }

      if (child.sources !== undefined) {
        elements.sources = child.sources.map(e => ({
          path: e.fileName,
          github: `https://github.com/auguwu/collections/blob/${commitHash}/${e.fileName}`,
          line: e.line,
          character: e.character
        }));
      }

      if (child.groups !== undefined) {
        for (let i = 0; i < child.groups.length; i++) {
          const group = child.groups[i];
        }
      }

      if (child.extendedTypes !== undefined) {
        for (let i = 0; i < child.extendedTypes.length; i++) {
          const type = child.extendedTypes[i];
          let name = type.name;

          if (type.typeArguments !== undefined) {
            name += '<';
            const args = [];

            for (let i = 0; i < type.typeArguments.length; i++) {
              const argument = type.typeArguments[i];
              args.push(argument.name);
            }

            name += `${args.join(', ')}>`;
            elements.extends.push(name);
          }
        }
      }
    } break;

    case 'Method': {
      // noop
    } break;

    case 'Accessor': {
      // noop
    } break;

    case 'Property': {
      // noop
    } break;

    case 'Variable': {
      // noop
    } break;

    case 'Function': {
      // noop
    } break;

    case 'Constructor': {
      // noop
    } break;
  }

  return elements;
}

main();
